[
["index.html", "R MarkdownでWebサイト生成しよう はじめに このリポジトリの使い方", " R MarkdownでWebサイト生成しよう Kazutan 2017-03-25 はじめに これは,R MarkdownでWebサイトを作成する手順について解説するものです。使用するファイル類は以下のGitHubリポジトリに設置しています: https://github.com/kazutan/RmdSite_tuto このリポジトリの使い方 「00_sample」から「04_sample」までのディレクトリ内に，それぞれ**_sample.Rprojというプロジェクトファイルがあります。説明資料で指示があったら，そのフォルダのプロジェクトファイルを開いてください。 "],
["lesson0.html", "lesson: 0 専用のプロジェクトを準備", " lesson: 0 専用のプロジェクトを準備 プロジェクトを新規で準備 準備したら，Tools - Project Option…を開く (もしくは*.RprojファイルをRStudio上で開く) Build Toolsに進み，Websiteを選択 サイトのルートディレクトリを設定 (ここではプロジェクトのルートディレクトリにします) OKをクリック "],
["lesson1.html", "lesson: 1 レッスン1 最小構成で準備してbuild", " lesson: 1 レッスン1 最小構成で準備してbuild 以下，01_sampleディレクトリを使います。該当ディレクトリ内のプロジェクトファイルを開いてください。 index.Rmdを準備 トップページ(index.html)用 ファイル冒頭のYAMLフロントマターにはtitleだけでOK _site.ymlを準備 これがサイト全体設定ファイルとなります ひとまず最低限のを記述しています その他のページ用Rmdを準備 ファイル名などは適当に 今回は簡単なのをひとつだけ プロジェクトをBuild BuildタブにあるBuild Websiteをクリック もし見当たらない場合は，一度プロジェクトを開き直してください 問題がなければ，(デフォで)_siteというディレクトリが作成 もしRmd内のチャンクにエラーがあって実行できない場合，buildもストップします この中にWebサイトに必要なものが自動的に生成されています 特に設定を変更してなければ，Viewerに表示されます 生成物をチェック 生成された_site/index.htmlをブラウザで開き，チェック "],
["lesson2.html", "lesson: 2 レッスン2 基本的なサイト設定 2.1 サイト名 2.2 navbar関連 2.3 output関連 2.4 output_dir", " lesson: 2 レッスン2 基本的なサイト設定 以下，02_sampleディレクトリを使います。該当ディレクトリ内のプロジェクトファイルを開いてください。 サイトの全体設定は_site.ymlファイルに記述していきます。以下このファイルの内容を説明していきます。 2.1 サイト名 name: &quot;サイトタイトル&quot; サイトのタイトルを文字列で指定します このサイトを開いた時，ウィンドウの一番上やタブに表示されます 2.2 navbar関連 navbar: title: &quot;My ウェブサイト&quot; left: - text: &quot;ホーム&quot; href: index.html - text: &quot;趣味&quot; href: shumi.html navbar:以降ぶら下がるのがいわゆるメニューバー設定 title:はサイト名として常に表示される left:以降ぶら下がっているのが項目で，左揃えで配置される -とその下にぶら下がるのが1項目分の情報 -text:は表示文字列，href:がリンク先 この他，色々設定できますが省略します 詳しくは公式ドキュメントのここにほぼすべて書いてあります 2.3 output関連 output: html_document: theme: cosmo highlight: textmate toc: true toc_float: collapse: false df_print: &quot;kable&quot; include: after_body: footer.html css: site_style.css 通常のR Markdownでのoutputの指定と同様です 設定可能項目はたくさん (現時点での)最新一覧は以下の資料を R Markdownのhtml_documentで指定できるyamlヘッダ項目について - Qiita この設定が(原則)全てのRmdファイルに当たります 個別のRmdファイルに記述すれば，そっちが優先されて上書きされます 2.4 output_dir output_dir: &quot;docs&quot; buildで生成される，Webサイトに必要なファイル一式を出力する場所を指定 ここにできたものをまるっとWebサーバーに設置すればOK 標準では_siteディレクトリ github.ioに設置を考えているなら，docsがおすすめ "],
["lesson3.html", "lesson: 3 レッスン03 サイトデザインを考える 3.1 知っておくべきこと 3.2 Rmdで生成されるタグのid, class 3.3 Bootstrapのgrid systemを利用 3.4 cssの優先順位", " lesson: 3 レッスン03 サイトデザインを考える 以下，03_exampleディレクトリを使用します。該当ディレクトリ内のプロジェクトファイルを開いてください。 開いたら，一旦buildしてみて確認してください。 3.1 知っておくべきこと R Markdownでhtmlを生成してデザインを考える上で，以下のことは頭に留めておいてください: RmdはPandocを利用してhtmlを生成 Rmd -&gt; (knit) -&gt; md -&gt; (Pandoc) -&gt; html 良くも悪くもPandocの影響を色濃く受ける Pandoc ユーザーズガイド 日本語版 - Japanese Pandoc User’s Association RStudioの“knit HTML”でPandocに送っている内容 - Qiita 生成されたhtmlにはBootstrapとjQueryが標準で組み込まれる Bootstrapベースでデザインすると楽 別のcssフレームワークにする場合は以下の記事を参照 R Markdownで標準のCSSとhighlightを取り除くには - Qiita 3.2 Rmdで生成されるタグのid, class 基本的にPandocの仕様で生成されます Rmdのサンプルは03_example/id_class_check.Rmd 生成されるhtmlは03_example/docs/id_class_check.html これの詳しい解説は，以下の記事を参照 R Markdownで生成するhtmlタグ要素のidとclassを確認 - Qiita 上記サンプルを参考に，cssを設定すればOK サイト全体テーマなら，_site.ymlで指定したcssファイルに 個別ページで当てたい場合については後述 3.3 Bootstrapのgrid systemを利用 Bootstrapはgrid systemを採用しています。R MarkdownではBootstrapを標準で組み込んでいますので比較的簡単に実装できます。 実装する方法はいくつかあります: &lt;div&gt;タグ直打ちで準備 gridレイアウトにしたい部分に対して を直打ちして指定 生成物が複雑になりがちでメンテしにくくなる Pandocの拡張機能を利用してclass属性を付与 詳しくは以下の記事を参照 R MarkdownでBootstrapのグリッドシステムを利用する - Qiita Rmdのサンプルは03_example/grid_test.Rmd 生成されるhtmlは03_example/docs/grid_test.html 設定する見出しのレベルにさえ配慮しておけば簡単 個人的には後者をおすすめします 3.4 cssの優先順位 個別ページでcssを設定した場合_site.ymlで指定したcssと差し替える サイト設定によるcssを活かしたい場合: cssファイルを2つ(orそれ以上)全てそのページで指定 yaml部分でincludeを活用してスタイルシートを指定 cssチャンクを利用して 部分にstyleを記述 cssチャンク &gt; includeによる指定 &gt; サイト設定 の順で優先される Rmdサンプルは03_example/css_test.Rmd 生成されるhtmlは03_example/docs/grid_test.html 他の複数ページでも同じスタイルを利用するのであれば，yamlのincludeオプションでうまく当てるのがスムーズです。もし「このページだけでちょっと当てたい」というのであればcssチャンクを使うのが楽でしょう。 "],
["lesson4.html", "lesson: 4 レッスン04 発展編 4.1 Rでhtml生成 4.2 JavaScriptを利用 4.3 その他", " lesson: 4 レッスン04 発展編 以下，04_exampleディレクトリを使用します。該当ディレクトリ内のプロジェクトファイルを開いてください。 開いたら，一旦buildしてみて確認してください。 4.1 Rでhtml生成 Rでhtmlを生成していくことも可能 knitr::kableなどもそのひとつ htmltoolsパッケージを駆使すれば色々できる 詳しくは公式ドキュメントのこちらを参照 たとえばサムネイルを作成することも可能 Rmdサンプルは04_example/html_gene.Rmd 生成されるhtmlは03_example/docs/html_gene.html 4.2 JavaScriptを利用 htmlwidgets系を使えばインタラクティブな可視化 詳細は省略しますが，そのままRチャンクに組み込めばOK R MarkdownではJavaScritpチャンクも使用可能 詳しくは公式ドキュメントのこちらを参照 jQueryを標準で読み込んでいるので，そのまま使える htmlwidgetsやjQueryを組み込んだ例: Rmdサンプルは04_example/js_test.Rmd 生成されるhtmlは03_example/docs/js_test.html 4.3 その他 説明および具体例は省略します。 includeオプションとexcludeオプションでoutput_dirへファイルをコピーするかどうかを制御可能 詳しくは公式ドキュメントのこちらを参照 ナビゲーションバー(navbar)について,自分でもっとBootstrapの機能を使ったものにできます _navbar.htmlというファイルを準備 ここにBootstrapのnavbarに関するhtmlシンタックスを記述すればOK 詳しくは公式ドキュメントのこのあたりを参照 繰り返し使うような要素はそこを別Rmdファイルに部分化し,呼び出して使うと楽 詳しくは公式ドキュメントのこのあたりや,この記事あたりを参考にしてください "],
["lesson5.html", "lesson: 5 サイト公開(デプロイ) 5.1 通常のWebサーバー 5.2 GitHub上に設置して公開", " lesson: 5 サイト公開(デプロイ) サイトを作成したら公開するのですが，設置する場所が必要です。 5.1 通常のWebサーバー 設置先のサーバーを準備 サーバ上の，Webサイトでのルートディレクトリに設定した場所を確認 _site.ymlでoutput_dir:指定した出力先(標準では_site/)に入っているファイルやディレクトリをまるっとコピー ようするに，出力されたものをまるっと置いてしまえばOKです。 5.2 GitHub上に設置して公開 GitHubにリポジトリを作成 公開するにはPublicである必要あり プロジェクトのディレクトリをGitHubリポジトリに紐付け .gitignoreにdoc/を追記しとくこと _site.ymlのoutput_dir:を“docs”へ指定 設定したらbuildを実行 commitしてmasterにPush ブラウザでGitHubの該当リポジトリへ Settingタブをクリック 下へスクロールしてGitHub Pagesへ Sourceで，Master branch /docs folderに切り替える しばらく待って，https://(アカウント名).github.io/(リポジトリ名)/へアクセス 以降は修正したらbuildしてcommit - pushでOKです。Gitに慣れているならば，これが一番楽になるでしょう。また，上記のレッスン00でプロジェクトを準備する際に，はじめからVersion Controlを指定しておくと楽でしょう。 "]
]
